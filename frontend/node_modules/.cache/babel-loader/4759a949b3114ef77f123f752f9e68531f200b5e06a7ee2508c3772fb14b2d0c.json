{"ast":null,"code":"import Midbar from\"../Midbar/Midbar\";import Sidebar from\"../Sidebar/Sidebar\";import ChatWindow from\"../ChatWindow/ChatWindow\";import\"./FullWindow.css\";import{useEffect,useState}from\"react\";import ExampleMessages from\"../ExampleMessages.json\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function FullWindow(){var _chats$selectedPrevie;// This tells us which friend we are conversing with\nvar[selectedPreviewIndex,setSelectedPreviewIndex]=useState(-1);const[messages,setMessages]=useState([]);const[chats,setChats]=useState([]);useEffect(()=>{const sortedChats=[...ExampleMessages].sort((a,b)=>{const lastMessageA=a.messages.length?new Date(a.messages[a.messages.length-1].dateTime):null;const lastMessageB=b.messages.length?new Date(b.messages[b.messages.length-1].dateTime):null;// If one of the chats has no messages, place it at the end\nif(!lastMessageA)return 1;if(!lastMessageB)return-1;// Otherwise, sort by the most recent message date\nreturn lastMessageB-lastMessageA;});setChats(sortedChats);},[messages]);// Using example messages, but we need to replace this with database calls\nconst handleGetMessages=otherID=>{var items=ExampleMessages.filter(item=>item.id==otherID);setMessages(items[0].messages);};const handleSetNewMessage=(otherID,senderID,date,msg)=>{var chat=ExampleMessages.find(chat=>chat.id==otherID);const newMessage={sender:senderID,dateTime:date,msg:msg};chat.messages.push(newMessage);// Want the preview to move to the top and have the highlight also move\nsetSelectedPreviewIndex(0);};return/*#__PURE__*/_jsxs(\"div\",{class:\"fullWindow\",children:[/*#__PURE__*/_jsx(Sidebar,{}),/*#__PURE__*/_jsx(Midbar,{selectedPreviewIndex:selectedPreviewIndex,setSelectedPreviewIndex:setSelectedPreviewIndex,handleGetMessages:handleGetMessages,allChats:chats}),/*#__PURE__*/_jsx(ChatWindow,{messages:messages,setMessages:setMessages,otherID:(_chats$selectedPrevie=chats[selectedPreviewIndex])===null||_chats$selectedPrevie===void 0?void 0:_chats$selectedPrevie.id,handleSetNewMessage:handleSetNewMessage})]});}export default FullWindow;","map":{"version":3,"names":["Midbar","Sidebar","ChatWindow","useEffect","useState","ExampleMessages","jsx","_jsx","jsxs","_jsxs","FullWindow","_chats$selectedPrevie","selectedPreviewIndex","setSelectedPreviewIndex","messages","setMessages","chats","setChats","sortedChats","sort","a","b","lastMessageA","length","Date","dateTime","lastMessageB","handleGetMessages","otherID","items","filter","item","id","handleSetNewMessage","senderID","date","msg","chat","find","newMessage","sender","push","class","children","allChats"],"sources":["C:/Users/justa/Desktop/COSC 617 Project Online/frontend/src/FullWindow/FullWindow.js"],"sourcesContent":["import Midbar from \"../Midbar/Midbar\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport ChatWindow from \"../ChatWindow/ChatWindow\";\r\nimport \"./FullWindow.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ExampleMessages from \"../ExampleMessages.json\";\r\n\r\nfunction FullWindow() {\r\n  // This tells us which friend we are conversing with\r\n  var [selectedPreviewIndex, setSelectedPreviewIndex] = useState(-1);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const [chats, setChats] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const sortedChats = [...ExampleMessages].sort((a, b) => {\r\n      const lastMessageA = a.messages.length\r\n        ? new Date(a.messages[a.messages.length - 1].dateTime)\r\n        : null;\r\n      const lastMessageB = b.messages.length\r\n        ? new Date(b.messages[b.messages.length - 1].dateTime)\r\n        : null;\r\n\r\n      // If one of the chats has no messages, place it at the end\r\n      if (!lastMessageA) return 1;\r\n      if (!lastMessageB) return -1;\r\n\r\n      // Otherwise, sort by the most recent message date\r\n      return lastMessageB - lastMessageA;\r\n    });\r\n\r\n    setChats(sortedChats);\r\n  }, [messages]);\r\n\r\n  // Using example messages, but we need to replace this with database calls\r\n  const handleGetMessages = (otherID) => {\r\n    var items = ExampleMessages.filter((item) => item.id == otherID);\r\n    setMessages(items[0].messages);\r\n  };\r\n\r\n  const handleSetNewMessage = (otherID, senderID, date, msg) => {\r\n    var chat = ExampleMessages.find((chat) => chat.id == otherID);\r\n    const newMessage = { sender: senderID, dateTime: date, msg: msg };\r\n    chat.messages.push(newMessage);\r\n    // Want the preview to move to the top and have the highlight also move\r\n    setSelectedPreviewIndex(0);\r\n  };\r\n\r\n  return (\r\n    <div class=\"fullWindow\">\r\n      <Sidebar />\r\n      <Midbar\r\n        selectedPreviewIndex={selectedPreviewIndex}\r\n        setSelectedPreviewIndex={setSelectedPreviewIndex}\r\n        handleGetMessages={handleGetMessages}\r\n        allChats={chats}\r\n      />\r\n      <ChatWindow\r\n        messages={messages}\r\n        setMessages={setMessages}\r\n        otherID={chats[selectedPreviewIndex]?.id}\r\n        handleSetNewMessage={handleSetNewMessage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FullWindow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
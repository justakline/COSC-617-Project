{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justa\\\\Desktop\\\\COSC 617 Project Online\\\\frontend\\\\src\\\\FullWindow\\\\FullWindow.js\",\n  _s = $RefreshSig$();\nimport Midbar from \"../Midbar/Midbar\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport ChatWindow from \"../ChatWindow/ChatWindow\";\nimport \"./FullWindow.css\";\nimport { useEffect, useState } from \"react\";\nimport ExampleMessages from \"../ExampleMessages.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FullWindow() {\n  _s();\n  var _chats$selectedPrevie;\n  // This tells us which friend we are conversing with\n  var [selectedPreviewIndex, setSelectedPreviewIndex] = useState(-1);\n  const [messages, setMessages] = useState([]);\n  const [chats, setChats] = useState([]);\n  useEffect(() => {\n    const sortedChats = [...ExampleMessages].sort((a, b) => {\n      const lastMessageA = a.messages.length ? new Date(a.messages[a.messages.length - 1].dateTime) : null;\n      const lastMessageB = b.messages.length ? new Date(b.messages[b.messages.length - 1].dateTime) : null;\n\n      // If one of the chats has no messages, place it at the end\n      if (!lastMessageA) return 1;\n      if (!lastMessageB) return -1;\n\n      // Otherwise, sort by the most recent message date\n      return lastMessageB - lastMessageA;\n    });\n    setChats(sortedChats);\n  }, [messages]);\n\n  // Using example messages, but we need to replace this with database calls\n  const handleGetMessages = otherID => {\n    var items = ExampleMessages.filter(item => item.id == otherID);\n    setMessages(items[0].messages);\n  };\n  const handleSetNewMessage = (otherID, senderID, date, msg) => {\n    var chat = ExampleMessages.find(chat => chat.id == otherID);\n    const newMessage = {\n      sender: senderID,\n      dateTime: date,\n      msg: msg\n    };\n    chat.messages.push(newMessage);\n    // Want the preview to move to the top and have the highlight also move\n    setSelectedPreviewIndex(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"fullWindow\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Midbar, {\n      selectedPreviewIndex: selectedPreviewIndex,\n      setSelectedPreviewIndex: setSelectedPreviewIndex,\n      handleGetMessages: handleGetMessages,\n      allChats: chats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages,\n      setMessages: setMessages,\n      otherID: (_chats$selectedPrevie = chats[selectedPreviewIndex]) === null || _chats$selectedPrevie === void 0 ? void 0 : _chats$selectedPrevie.id,\n      handleSetNewMessage: handleSetNewMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(FullWindow, \"zVf6DSj9Qrapc68Q3gvFRVBXDlE=\");\n_c = FullWindow;\nexport default FullWindow;\nvar _c;\n$RefreshReg$(_c, \"FullWindow\");","map":{"version":3,"names":["Midbar","Sidebar","ChatWindow","useEffect","useState","ExampleMessages","jsxDEV","_jsxDEV","FullWindow","_s","_chats$selectedPrevie","selectedPreviewIndex","setSelectedPreviewIndex","messages","setMessages","chats","setChats","sortedChats","sort","a","b","lastMessageA","length","Date","dateTime","lastMessageB","handleGetMessages","otherID","items","filter","item","id","handleSetNewMessage","senderID","date","msg","chat","find","newMessage","sender","push","class","children","fileName","_jsxFileName","lineNumber","columnNumber","allChats","_c","$RefreshReg$"],"sources":["C:/Users/justa/Desktop/COSC 617 Project Online/frontend/src/FullWindow/FullWindow.js"],"sourcesContent":["import Midbar from \"../Midbar/Midbar\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport ChatWindow from \"../ChatWindow/ChatWindow\";\r\nimport \"./FullWindow.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ExampleMessages from \"../ExampleMessages.json\";\r\n\r\nfunction FullWindow() {\r\n  // This tells us which friend we are conversing with\r\n  var [selectedPreviewIndex, setSelectedPreviewIndex] = useState(-1);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const [chats, setChats] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const sortedChats = [...ExampleMessages].sort((a, b) => {\r\n      const lastMessageA = a.messages.length\r\n        ? new Date(a.messages[a.messages.length - 1].dateTime)\r\n        : null;\r\n      const lastMessageB = b.messages.length\r\n        ? new Date(b.messages[b.messages.length - 1].dateTime)\r\n        : null;\r\n\r\n      // If one of the chats has no messages, place it at the end\r\n      if (!lastMessageA) return 1;\r\n      if (!lastMessageB) return -1;\r\n\r\n      // Otherwise, sort by the most recent message date\r\n      return lastMessageB - lastMessageA;\r\n    });\r\n\r\n    setChats(sortedChats);\r\n  }, [messages]);\r\n\r\n  // Using example messages, but we need to replace this with database calls\r\n  const handleGetMessages = (otherID) => {\r\n    var items = ExampleMessages.filter((item) => item.id == otherID);\r\n    setMessages(items[0].messages);\r\n  };\r\n\r\n  const handleSetNewMessage = (otherID, senderID, date, msg) => {\r\n    var chat = ExampleMessages.find((chat) => chat.id == otherID);\r\n    const newMessage = { sender: senderID, dateTime: date, msg: msg };\r\n    chat.messages.push(newMessage);\r\n    // Want the preview to move to the top and have the highlight also move\r\n    setSelectedPreviewIndex(0);\r\n  };\r\n\r\n  return (\r\n    <div class=\"fullWindow\">\r\n      <Sidebar />\r\n      <Midbar\r\n        selectedPreviewIndex={selectedPreviewIndex}\r\n        setSelectedPreviewIndex={setSelectedPreviewIndex}\r\n        handleGetMessages={handleGetMessages}\r\n        allChats={chats}\r\n      />\r\n      <ChatWindow\r\n        messages={messages}\r\n        setMessages={setMessages}\r\n        otherID={chats[selectedPreviewIndex]?.id}\r\n        handleSetNewMessage={handleSetNewMessage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FullWindow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}